.TH "Advanced Traversal Helpers" 3 "Sun Oct 2 2011" "Version 1.2.2" "Hardware Locality (hwloc)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Advanced Traversal Helpers \- 
.SS "Functions"

.in +1c
.ti -1c
.RI " unsigned \fBhwloc_get_closest_objs\fP (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fP src, \fBhwloc_obj_t\fP *restrict objs, unsigned max)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_obj_below_by_type\fP (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_type_t\fP type1, unsigned idx1, \fBhwloc_obj_type_t\fP type2, unsigned idx2)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_obj_below_array_by_type\fP (\fBhwloc_topology_t\fP topology, int nr, \fBhwloc_obj_type_t\fP *typev, unsigned *idxv)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Be sure to see the figure in \fBTerms and Definitions\fP that shows a complete topology tree, including depths, child/sibling/cousin relationships, and an example of an asymmetric topology where one socket has fewer caches than its peers. 
.SH "Function Documentation"
.PP 
.SS " unsigned hwloc_get_closest_objs (\fBhwloc_topology_t\fPtopology, \fBhwloc_obj_t\fPsrc, \fBhwloc_obj_t\fP *restrictobjs, unsignedmax)"
.PP
Do a depth-first traversal of the topology to find and sort. all objects that are at the same depth than \fCsrc\fP. Report in \fCobjs\fP up to \fCmax\fP physically closest ones to \fCsrc\fP.
.PP
\fBReturns:\fP
.RS 4
the number of objects returned in \fCobjs\fP. 
.RE
.PP

.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_obj_below_array_by_type (\fBhwloc_topology_t\fPtopology, intnr, \fBhwloc_obj_type_t\fP *typev, unsigned *idxv)\fC [static]\fP"
.PP
Find an object below a chain of objects specified by types and indexes. This is a generalized version of \fBhwloc_get_obj_below_by_type()\fP.
.PP
Arrays \fCtypev\fP and \fCidxv\fP must contain \fCnr\fP types and indexes.
.PP
Start from the top system object and walk the arrays \fCtypev\fP and \fCidxv\fP. For each type and logical index couple in the arrays, look under the previously found object to find the index-th object of the given type. Indexes are specified within the parent, not withing the entire system.
.PP
For instance, if nr is 3, typev contains NODE, SOCKET and CORE, and idxv contains 0, 1 and 2, return the third core object below the second socket below the first NUMA node. 
.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_obj_below_by_type (\fBhwloc_topology_t\fPtopology, \fBhwloc_obj_type_t\fPtype1, unsignedidx1, \fBhwloc_obj_type_t\fPtype2, unsignedidx2)\fC [static]\fP"
.PP
Find an object below another object, both specified by types and indexes. Start from the top system object and find object of type \fCtype1\fP and logical index \fCidx1\fP. Then look below this object and find another object of type \fCtype2\fP and logical index \fCidx2\fP. Indexes are specified within the parent, not withing the entire system.
.PP
For instance, if type1 is SOCKET, idx1 is 2, type2 is CORE and idx2 is 3, return the fourth core object below the third socket. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Hardware Locality (hwloc) from the source code.
