.TH "Basic Traversal Helpers" 3 "Sun Oct 2 2011" "Version 1.2.2" "Hardware Locality (hwloc)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Basic Traversal Helpers \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_root_obj\fP (\fBhwloc_topology_t\fP topology)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_ancestor_obj_by_depth\fP (\fBhwloc_topology_t\fP topology , unsigned depth, \fBhwloc_obj_t\fP obj)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_ancestor_obj_by_type\fP (\fBhwloc_topology_t\fP topology , \fBhwloc_obj_type_t\fP type, \fBhwloc_obj_t\fP obj)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP \fBhwloc_get_next_obj_by_depth\fP (\fBhwloc_topology_t\fP topology, unsigned depth, \fBhwloc_obj_t\fP prev)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP \fBhwloc_get_next_obj_by_type\fP (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_type_t\fP type, \fBhwloc_obj_t\fP prev)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_pu_obj_by_os_index\fP (\fBhwloc_topology_t\fP topology, unsigned os_index)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP \fBhwloc_get_next_child\fP (\fBhwloc_topology_t\fP topology , \fBhwloc_obj_t\fP parent, \fBhwloc_obj_t\fP prev)"
.br
.ti -1c
.RI "static inline \fBhwloc_obj_t\fP  \fBhwloc_get_common_ancestor_obj\fP (\fBhwloc_topology_t\fP topology , \fBhwloc_obj_t\fP obj1, \fBhwloc_obj_t\fP obj2)"
.br
.ti -1c
.RI "static inline int  \fBhwloc_obj_is_in_subtree\fP (\fBhwloc_topology_t\fP topology , \fBhwloc_obj_t\fP obj, \fBhwloc_obj_t\fP subtree_root)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Be sure to see the figure in \fBTerms and Definitions\fP that shows a complete topology tree, including depths, child/sibling/cousin relationships, and an example of an asymmetric topology where one socket has fewer caches than its peers. 
.SH "Function Documentation"
.PP 
.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_ancestor_obj_by_depth (\fBhwloc_topology_t\fP topology, unsigneddepth, \fBhwloc_obj_t\fPobj)\fC [static]\fP"
.PP
Returns the ancestor object of \fCobj\fP at depth \fCdepth\fP. 
.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_ancestor_obj_by_type (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_type_t\fPtype, \fBhwloc_obj_t\fPobj)\fC [static]\fP"
.PP
Returns the ancestor object of \fCobj\fP with type \fCtype\fP. 
.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_common_ancestor_obj (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fPobj1, \fBhwloc_obj_t\fPobj2)\fC [static]\fP"
.PP
Returns the common parent object to objects lvl1 and lvl2. 
.SS "static inline \fBhwloc_obj_t\fP hwloc_get_next_child (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fPparent, \fBhwloc_obj_t\fPprev)\fC [static]\fP"
.PP
Return the next child. If \fCprev\fP is \fCNULL\fP, return the first child. 
.SS "static inline \fBhwloc_obj_t\fP hwloc_get_next_obj_by_depth (\fBhwloc_topology_t\fPtopology, unsigneddepth, \fBhwloc_obj_t\fPprev)\fC [static]\fP"
.PP
Returns the next object at depth \fCdepth\fP. If \fCprev\fP is \fCNULL\fP, return the first object at depth \fCdepth\fP. 
.SS "static inline \fBhwloc_obj_t\fP hwloc_get_next_obj_by_type (\fBhwloc_topology_t\fPtopology, \fBhwloc_obj_type_t\fPtype, \fBhwloc_obj_t\fPprev)\fC [static]\fP"
.PP
Returns the next object of type \fCtype\fP. If \fCprev\fP is \fCNULL\fP, return the first object at type \fCtype\fP. If there are multiple or no depth for given type, return \fCNULL\fP and let the caller fallback to \fBhwloc_get_next_obj_by_depth()\fP. 
.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_pu_obj_by_os_index (\fBhwloc_topology_t\fPtopology, unsignedos_index)\fC [static]\fP"
.PP
Returns the object of type \fBHWLOC_OBJ_PU\fP with \fCos_index\fP. \fBNote:\fP
.RS 4
The \fCos_index\fP field of object should most of the times only be used for pretty-printing purpose. Type \fBHWLOC_OBJ_PU\fP is the only case where \fCos_index\fP could actually be useful, when manually binding to processors. However, using CPU sets to hide this complexity should often be preferred. 
.RE
.PP

.SS "static inline \fBhwloc_obj_t\fP  hwloc_get_root_obj (\fBhwloc_topology_t\fPtopology)\fC [static]\fP"
.PP
Returns the top-object of the topology-tree. Its type is typically \fBHWLOC_OBJ_MACHINE\fP but it could be different for complex topologies. This function replaces the old deprecated hwloc_get_system_obj(). 
.SS "static inline int  hwloc_obj_is_in_subtree (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fPobj, \fBhwloc_obj_t\fPsubtree_root)\fC [static]\fP"
.PP
Returns true if \fCobj\fP is inside the subtree beginning with \fCsubtree_root\fP. \fBNote:\fP
.RS 4
This function assumes that both \fCobj\fP and \fCsubtree_root\fP have a \fCcpuset\fP. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Hardware Locality (hwloc) from the source code.
